{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://127.0.0.1:5000';\nexport class ProductoService {\n  //Iniciamos en el constructor los metodos del HTTP\n  constructor(http) {\n    this.http = http;\n  }\n  //Declaramos la funcion para realizar consultas al api\n  getTodo() {\n    let header = new HttpHeaders().set('Type-content', 'aplication/json');\n    return this.http.get(baseUrl, {\n      headers: header\n    });\n  }\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  get(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  create(data) {\n    return this.http.post(`${baseUrl}/registroproducto`, data);\n  }\n  update(id, data) {\n    return this.http.put(`${baseUrl}/${id}`, data);\n  }\n  updateAll() {\n    return this.http.get(baseUrl);\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  deleteAll() {\n    return this.http.delete(baseUrl);\n  }\n  static #_ = this.ɵfac = function ProductoService_Factory(t) {\n    return new (t || ProductoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductoService,\n    factory: ProductoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAK9D,MAAMC,OAAO,GAAG,uBAAuB;AAKvC,OAAM,MAAOC,eAAe;EAE1B;EACAC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;EAAe;EAEvC;EACAC,OAAO;IACL,IAAIC,MAAM,GAAE,IAAIN,WAAW,EAAE,CAACO,GAAG,CAAC,cAAc,EAAC,iBAAiB,CAAC;IACnE,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAACP,OAAO,EAAC;MAACQ,OAAO,EAACH;IAAM,CAAC,CAAC;EAChD;EAEAI,MAAM;IACJ,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAmBP,OAAO,CAAC;EACjD;EAEAO,GAAG,CAACG,EAAO;IACT,OAAO,IAAI,CAACP,IAAI,CAACI,GAAG,CAAC,GAAGP,OAAO,IAAIU,EAAE,EAAE,CAAC;EAC1C;EAEAC,MAAM,CAACC,IAAmB;IACxB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,GAAGb,OAAO,mBAAmB,EAAEY,IAAI,CAAC;EAC5D;EAEAE,MAAM,CAACJ,EAAO,EAAEE,IAAS;IACvB,OAAO,IAAI,CAACT,IAAI,CAACY,GAAG,CAAC,GAAGf,OAAO,IAAIU,EAAE,EAAE,EAAEE,IAAI,CAAC;EAChD;EAEAI,SAAS;IACP,OAAO,IAAI,CAACb,IAAI,CAACI,GAAG,CAAuBP,OAAO,CAAC;EACrD;EAEAiB,MAAM,CAACP,EAAO;IACZ,OAAO,IAAI,CAACP,IAAI,CAACc,MAAM,CAAC,GAAGjB,OAAO,IAAIU,EAAE,EAAE,CAAC;EAC7C;EAEAQ,SAAS;IACP,OAAO,IAAI,CAACf,IAAI,CAACc,MAAM,CAACjB,OAAO,CAAC;EAClC;EAAC;qBArCUC,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAkB,SAAflB,eAAe;IAAAmB,YAFd;EAAM","names":["HttpHeaders","baseUrl","ProductoService","constructor","http","getTodo","header","set","get","headers","getAll","id","create","data","post","update","put","updateAll","delete","deleteAll","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\SENA\\Documents\\Mateo\\Arle\\ProyectoFinal-master\\ProyectoFinal-master\\front\\src\\app\\servicios\\producto\\producto.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ObjetoProducto, CrearProducto } from 'src/app/clases/producto/producto';\r\nimport { actualizarProducto } from '../../clases/producto/producto';\r\n\r\nconst baseUrl = 'http://127.0.0.1:5000';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductoService {\r\n\r\n  //Iniciamos en el constructor los metodos del HTTP\r\n  constructor(private http:HttpClient) { }\r\n\r\n  //Declaramos la funcion para realizar consultas al api\r\n  getTodo(){\r\n    let header= new HttpHeaders().set('Type-content','aplication/json')\r\n    return this.http.get(baseUrl,{headers:header})\r\n  }\r\n\r\n  getAll(): Observable<ObjetoProducto[]> {\r\n    return this.http.get<ObjetoProducto[]>(baseUrl);\r\n  }\r\n\r\n  get(id: any): Observable<any> {\r\n    return this.http.get(`${baseUrl}/${id}`);\r\n  }\r\n\r\n  create(data: CrearProducto): Observable<any> {\r\n    return this.http.post(`${baseUrl}/registroproducto`, data);\r\n  }\r\n\r\n  update(id: any, data: any): Observable<any> {\r\n    return this.http.put(`${baseUrl}/${id}`, data);\r\n  }\r\n\r\n  updateAll(): Observable<actualizarProducto[]> {\r\n    return this.http.get<actualizarProducto[]>(baseUrl);\r\n  }\r\n\r\n  delete(id: any): Observable<any> {\r\n    return this.http.delete(`${baseUrl}/${id}`);\r\n  }\r\n\r\n  deleteAll(): Observable<any> {\r\n    return this.http.delete(baseUrl);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}